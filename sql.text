3-1
1, 
SELECT * FROM 気象観測
WHERE 月 = 6

2,
SELECT * FROM 気象観測
WHERE 月 <> 6

3,
SELECT * FROM 気象観測
WHERE 降水量 < 100

4,
SELECT * FROM 気象観測
WHERE 降水量 > 200

5, 
SELECT * FROM 気象観測
WHERE 最高気温 >= 30

6,
SELECT * FROM 気象観測
WHERE 最低気温 <= 0

7,
SELECT * FROM 気象観測
WHERE 月 IN (3, 5, 7)

SELECT * FROM 気象観測
WHERE 月 = 3 OR 月 = 5 OR 月 = 7

8,
SELECT * FROM 気象観測
WHERE 月 NOT IN (3, 5, 7)

SELECT * FROM 気象観測
WHERE 月 <> 3 AND 月 <> 5 月 <> 7

9,
SELECT * FROM 気象観測
WHERE 降水量 <= 100 AND 湿度 < 50

10,
SELECT * FROM 気象観測
WHERE 最低気温 < 5 OR 最高気温 > 35

11,
SELECT * FROM 気象観測
WHERE 湿度 BETWEEN 60 AND 79

12,
SELECT * FROM 気象観測
WHERE 降水量 IS NULL OR 最高気温 IS NULL
	OR 最低気温 IS NULL OR 湿度 IS NULL

3-2
1,
SELECT 都道府県名 FROM 都道府県
WHERE 都道府県名 LIKE '%川'

2,
SELECT 都道府県名 FROM 都道府県
WHERE 都道府県名 LIKE '%島%'

3,
SELECT 都道府県名 FROM 都道府県
WHERE 都道府県名 LIKE '愛%'

4,
SELECT * FROM 都道府県
WHERE 都道府県名 = 県庁所在地

5,
SELECT * FROM 都道府県
WHERE 都道府県名 <> 県庁所在地

3-3,
1,
SELECT * FROM 成績表

2,
INSERT INTO 成績表
	VALUES ('S001', '織田信長', 77, 55, 80, 75, 93, NULL)
INSERT INTO 成績表
	VALUES ('A002', '豊臣秀吉', 64, 69, 70, 0, 59, NULL)

3,
UPDATE 成績表
	SET 法学 = 85, 哲学 = 67 
	WHERE 学籍番号 = 'S001'

4, 
UPDATE 成績表
	SET 外国語 = 93
	WHERE 学籍番号 IN ('A002', 'E003')

5,
(1)
UPDATE 成績表
	SET 総合成績 = 'A'
WHERE 法学 >= 80 AND 経済学 >= 80 AND 哲学 >= 80 AND 情報理論 >= 80 AND 外国語 >= 80

(2)
UPDATE 成績表
	SET 総合成績 = 'B'
WHERE (法学 >= 80 OR 外国語 >= 80) AND (経済学 >= 80 OR 哲学 >= 80)

(3)
UPDATE 成績表
	SET 総合成績 = 'D'
WHERE 法学 < 50 AND 経済学 < 50 AND 哲学 < 50 AND 情報理論 < 50 AND 外国語 < 50

(4)
UPDATE 成績表
	SET 総合成績 = 'C'
WHERE 総合成績 = NULL

6,
DELETE FROM 成績表
WHERE 法学 = 0 OR 経済学 = 0 OR 哲学 = 0 OR 情報理論 = 0 OR 外国語 = 0

3-4
1, compound key
2, artificial key
3, natural key



4-1
1,
SELECT * FROM 注文履歴
ORDER BY 注文番号

2,
SELECT DISTINCT 商品名 FROM 注文履歴
WHERE 日付 BETWEEN '2013-01-01' AND '2013-01-31'
ORDER BY 商品名

3,
SELECT 商品名, 単価 FROM 注文履歴
WHERE 分類 = '1'
ORDER BY 単価 LIST 3

4,
SELECT 商品名, 単価　FROM 注文履歴
WHERE 分類 = '2'
ORDER BY 単価 DESC LIST 1 OFFSET 1

5,
SELECT 日付, 商品名, 単価, 数量, 注文金額 FROM 注文履歴
WHERE 分類 = '3' AND 数量 >= 2
ORDER BY 日付, 数量 DESC

6,
SELECT DISTINCT 分類, 商品名, サイズ, 単価 FROM 注文履歴
WHERE 分類 = '1'
UNION
SELECT 分類, 商品名, NULL, 単価 FROM 注文履歴
WHERE 分類 = '2'
UNION
SELECT 分類, 商品名, NULL, 単価 FROM 注文履歴
WHERE 分類 = '3'
ORDER BY 分類, 商品名


4-2
1,
SELECT 値 FROM 偶数
UNION
SELECT 値 FROM 奇数

2,
SELECT 値 FROM 整数
EXCEPT
SELECT 値 FROM 偶数

3,
SELECT 値 FROM 偶数
INTERSECT
SELECT 値 FROM 整数

4,
SELECT 値 FROM 偶数
INTERSECT
SELECT 値 FROM 奇数

5-1
1,
A
UPDATE 試験結果
SET 午後1 = 80*4 - (86 + 68 + 91)
WHERE 受験者ID = 'SW1046'


B
UPDATE 試験結果
SET 論述 = 68*4 - (65 + 53 + 70)
WHERE 受験者ID = 'SW1350'

C
UPDATE 試験結果
SET 午前 = 56*4 - (59 + 56 + 36)
WHERE 受験者ID = 'SW1877'

2,
SELECT 受験者ID AS 合格者ID, 午前, 午後1, 午後2, 論述, 平均点
WHERE 午前 <= 60 AND 午後1 + 午後2 >= 120 AND 論述 >= 平均点*4*0.3
FROM 家計簿

5-2 (hard)
1,
UPDATE 回答者
SET 国名 = CASE SUBSTRING(TRIM(メールアドレス), LENGTH(TRIM(メールアドレス))-1, 2)
WHEN 'jp' THEN '日本'
WHEN 'uk' THEN 'イギリス'
WHEN 'cn' THEN '中国'
WHEN 'fr' THEN 'フランス'
WHEN 'vn' THEN 'ベトナム'
END

2,
SELECT TRIM(メールアドレス) AS メールアドレス, 
CASE WHEN 年齢 >= 20 AND 年齢 < 30 THEN '20代'
WHEN 年齢 >= 30 AND 年齢 < 40 THEN '30代'
WHEN 年齢 >= 40 AND 年齢 < 50 THEN '40代'
WHEN 年齢 >= 50 AND 年齢 < 60 THEN '50代'
END
|| ':' ||
CASE 性別
WHEN 'M' THEN '男性'
WHEN 'F' THEN '女性'
END AS 属性
FROM 回答者

5-3
1,
UPDATE 受注
SET 文字数　= LENGTH(REPLACE(文字, ' ', ''))

2,
SELECT 受注日, 受注ID, 文字数, 
CASE COALESCE(書体コード, '1')
WHEN '1' THEN 'ブロック体'
WHEN '2' THEN '筆記体'
WHEN '3' THEN '草書体'
END AS 書体名,
CASE COALESCE(書体コード, '1')
WHEN '1' THEN '100'
WHEN '2' THEN '150'
WHEN '3' THEN '200'
END AS 単価
CASE
WHEN 文字数 >= 10 THEN '500'
ELSE '0'
END AS 特別加工料
FROM 受注
ORDER BY 受注日, 受注ID

3,
UPDATE 受注
SET 文字 = REPLACE(文字, ' ', '★')
WHERE 受注ID = '113'

6-1
1,
SELECT SUM(降水量) AS 年間降水量, AVG(最高気温) AS 平均最高気温, AVG(最低気温) AS 平均最低気温
FROM 都市別気象観測

2,
SELECT SUM(降水量) AS 年間降水量, AVG(最高気温) AS 平均最高気温, AVG(最低気温) AS 平均最低気温
FROM 都市別気象観測
GROUP BY 都市名
HAVING 都市名 = '東京'

3,
SELECT AVG(降水量) AS 平均降水量, MIN(最高気温) AS 最低最高気温, MAX(最低気温) AS 最高最低気温
FROM 都市別気象観測
GROUP BY 都市名

4,
SELECT 月, AVG(降水量) AS 平均降水量, AVG(最高気温) AS 平均最高気温, AVG(最低気温) AS 平均最低気温
FROM 都市別気象観測
GROUP BY 月

5,
SELECT 都市名, MAX(最高気温)
FROM 都市別気象観測
GROUP BY 都市名
HAVING MAX(最高気温) >= 38

6,
SELECT 都市名, MIN(最低気温)
FROM 都市別気象観測
GROUP BY 都市名
HAVING MIN(最低気温) <= -10

6-2,
1,
SELECT COUNT(*) AS 入室中　FROM 入退室管理
WHERE 退室 = NULL

2,
SELECT 社員名, COUNT(*) AS 入室回数 FROM 入退室管理
GROUP BY 社員名
ORDER BY 入室回数 DESC

3,
SELECT 
CASE 事由区分 
WHEN '1' THEN 'メンテナンス'
WHEN '2' THEN 'リリース作業'
WHEN '3' THEN '障害対応'
WHEN '9' THEN 'その他'
END AS 事由,
COUNT(*) AS 入室回数
FROM 入退室管理
GROUP BY 事由区分

4,
SELECT 社員名, COUNT(*) AS 入室回数 FROM 入退室管理
HAVING COUNT(*) > 10
GROUP BY 社員名

5,
SELECT 日付, COUNT(社員名) AS 社員数 FROM 入退室管理
WHERE 事由区分 = '3'
GROUP BY 日付

7-1,
A: 単一行副問い合わせ
B: SELECT
C: SET
D: n
E: 1
F: 複数行副問い合わせ
G: ANY
H: ALL
I: FROM
J: 表
K: INSERT	

7-2,
SQL1
副問い合わせ
レンタル日数: 3
全体
金額: 25200

SQL2
副問い合わせ
車種コード
S01, E01, S02
全体
車種コード: 車種名
S01: 軽自動車
E01: エコカー
S02: ハッチバック

SQL3
副問い合わせ
車種コード: 日数
S01: 3
S02: 6
E01: 3
全体
合計日数: 車種数
12: 3

7-3,
1,
INSERT INTO 頭数集計
SELECT 飼育県, COUNT(個体識別番号) AS 飼育頭数
FROM 個体識別
GROUP BY 飼育県

2,
SELECT 飼育県 AS 都道府県名, 個体識別番号, 
CASE 雌雄コード
WHEN '1' THEN '雄'
WHEN '2' THEN '雌'
END AS 雌雄
FROM 個体識別
WHERE 飼育県 IN (
SELECT 飼育県 FROM 頭数集計
ORDER BY 頭数 DESC LIMIT 3)

3,
SELECT 個体識別番号, 
CASE 品種コード
WHEN '01' THEN 乳用種
WHEN '02' THEN 肉用種
WHEN '03' THEN 交雑種
END AS 品種, 出生日, 母牛番号
FROM 個体識別
WHERE 母牛番号 IN (
SELECT 個体識別番号 AS 乳用種個体 FROM 個体識別
WHERE 品種コード = '01')

8-1,
1,
A1:A2:B1:B2
1:3:1:2

2,
A1:A2:B1:B2
2:4:1:2

3,
A1:A2:B1:B2
2:4:1:2
NULL:NULL:3:NULL

4,
A.A1:C.A2:B1:B2
1:3:1:2

8-2,
1,
SELECT 社員番号, S.名前 AS 名前, B.名前 AS 部署名 FROM 社員 AS S
JOIN 部署 AS B
ON S.部署ID = B.部署ID

2,
SELECT A.社員番号, A.名前, B.名前 AS 上司名 FROM 社員 AS A
LEFT JOIN 社員 AS B 
ON A.上司ID = B.社員番号

3,
SELECT 社員番号, S.名前 AS 名前, B.名前 AS 部署名, K.名前 AS 勤務地 FROM 社員 AS S
JOIN 部署 AS B
ON S.部署ID = B.部署ID
JOIN 支店 AS K
ON S.勤務地ID = K.支店ID

4,
SELECT 支店ID AS 支店コード, K.名前 AS 支店名, S.名前 AS 支店長名, T.社員数
FROM 支店　AS K
JOIN 社員 AS S
ON K.支店長ID = S.社員番号
JOIN (SELECT COUNT(*) AS 社員数, 勤務地ID FROM 社員 GROUP BY 勤務地ID) AS T
ON K.支店ID = T.勤務地ID

5,
SELECT S1.社員番号 AS 社員番号, S1.名前, K1.名前 AS 本人勤務地, K2.名前 上司勤務地 FROM 社員 AS S1
JOIN 社員 AS S2
ON S1.上司ID = S2.社員番号
AND S1.勤務地ID <> S2.勤務地ID
JOIN 支店 AS K1
ON S1.勤務地ID = K1.支店ID
JOIN 支店 AS K2
ON S2.勤務地ID = K2.支店ID


9-1,
A: トランザクション
B: COMMIT
C: 原子性
D: 分離性
E: トランザクション分離レベル

9-2,
1,
A, Read committed故にupdate文にて在庫テーブル残数の処理を割り込んでしまう可能性がある。(反復不能読み取り)
B, read committed故にinsert文にて他のselect処理に差が生まれる可能性がある。(ファントムリード)

2,
BEGIN;
INSERT INTO 受注 (注文番号, 日付, 顧客番号, 商品番号, 注文数)
VALUES ('119226', '2013-04-08', '8828', '0008', 12);
UPDATE 在庫
SET 残数 = 残数 - 12
WEHRE 商品番号 = '0008';
COMMIT;

3,
ア、ウ、エ、オ、カ、

10-1
イ、ウ、キ

10-2
CREATE TABLE 学部 (
ID CHAR(1) PRIMARY KEY,
名前 VARCHAR(20) UNIQUE NOT NULL,
備考 VARCHAR(100) DEFAULT '特になし'
)

10-3
CREATE TABLE 学生 (
学籍番号 CHAR(8) PRIMARY KEY,
名前 VARCHAR(30) NOT NULL,
生年月日 DATE NOT NULL,
血液型 CHAR(2), 
学部ID CHAR(1) REFERENCES 学部(ID),
)

10-4
1,学部テーブルに無いIDを学生.学部IDに追加する
2,学部テーブルを削除してしまう

10-5
SELECT REPLACE(学部ID, 'R', 'K') FROM 学生

DELETE FROM 学部
WHERE ID = 'R'



























